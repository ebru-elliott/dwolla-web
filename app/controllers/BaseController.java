package controllers;

import models.User;
import play.mvc.Controller;
import play.mvc.Result;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

public class BaseController extends Controller {

    /**
     * Dwolla REST API uses this constant if the request is coming from a web server application
     */
    protected static final String AUTHORIZATION_CODE = "authorization_code";

    protected static final String DWOLLA_API_BASEURL = "https://www.dwolla.com";

    /**
     * Dwolla REST API URL to initiate the Dwolla Oauth Flow
     */
    protected static final String DWOLLA_API_URL = DWOLLA_API_BASEURL + "/oauth/rest";

    /**
     * Destination Dwolla Client Id for the money transaction
     */
    protected static final String DWOLLA_DESTINATION_ID = System.getenv("DWOLLA_DESTINATION_ID");

    /**
     * Application key generated by Dwolla specifically for this web application
     */
    protected static final String DWOLLA_APP_KEY = System.getenv("DWOLLA_APP_KEY");

    /**
     * Application secret generated by Dwolla specifically for this web application
     */
    protected static final String DWOLLA_APP_SECRET = System.getenv("DWOLLA_APP_SECRET");

    /**
     *  URL to return the user to after the user approves or denies the authentication request.
     */
    protected static final String DWOLLA_REDIRECT_URI = System.getenv("BASE_HOST_URL") + "/oauth";

    //session variables
    protected static final String ID = "id";
    protected static final String USERNAME = "username";
    protected static final String IS_ADMIN = "isAdmin";

    //error handling
    protected static final String SUCCESS = "success";
    protected static final String ERROR = "error";

    /**
     * Populates the session with the user values.
     *
     * @param user authenticated user
     */
    public static void populateSession(User user) {
        session(ID, String.valueOf(user.id));
        session(USERNAME, user.username);
        session(IS_ADMIN, String.valueOf(user.isAdmin));
    }

    /**
     * Returns true if the user is authenticated by checking the existence of an id in the session.
     *
     * @return true if the user is authenticated.
     */
    public static boolean isAuthenticated() {
        return session(ID) != null;
    }

    /**
     * Returns the user id of the user in the session.
     *
     * @return user id from the session
     */
    public static Integer currentUserId() {
        return Integer.valueOf(session(ID));
    }

    /**
     * Returns the current user.
     *
     * @return user
     */
    public static User currentUser() {
        return User.byId(currentUserId());
    }

    /**
     * Returns the encoded Dwolla Application Key.
     *
     * @return encoded Dwolla Application Key
     */
    public static String dwollaAppKey() {
        return encode(DWOLLA_APP_KEY);
    }

    /**
     * Returns the redirect uri. URL to return the user to after they approve or deny the authentication request.
     *
     * @return the redirect uri
     */
    public static String dwollaRedirectUri() {
        return encode(DWOLLA_REDIRECT_URI);
    }

    /**
     * Translates the value using the UTF-8 encoding.
     *
     * @param s <code>String</code> to be translated.
     * @return the translated <code>String</code>
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, "UTF-8");
        } catch (UnsupportedEncodingException uee) {
            throw new RuntimeException(uee);
        }
    }

    /**
     * Redirects to the user menu.
     *
     * @return user menu
     */
    public static Result goMenu() {
        return redirect(routes.Application.menu());
    }

}
